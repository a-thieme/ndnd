// Code generated by ndn tlv codegen DO NOT EDIT.
package tlv

import (
	"encoding/binary"
	"io"
	"strings"

	enc "github.com/named-data/ndnd/std/encoding"
)

type RepoCommandEncoder struct {
	Length uint

	Target_length uint
}

type RepoCommandParsingContext struct {
}

func (encoder *RepoCommandEncoder) Init(value *RepoCommand) {

	if value.Target != nil {
		encoder.Target_length = 0
		for _, c := range value.Target {
			encoder.Target_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	l += 3
	l += uint(enc.TLNum(len(value.Type)).EncodingLength())
	l += uint(len(value.Type))
	if value.Target != nil {
		l += 3
		l += uint(enc.TLNum(encoder.Target_length).EncodingLength())
		l += encoder.Target_length
	}
	l += 3
	l += uint(1 + enc.Nat(value.SnapshotThreshold).EncodingLength())
	encoder.Length = l

}

func (context *RepoCommandParsingContext) Init() {

}

func (encoder *RepoCommandEncoder) EncodeInto(value *RepoCommand, buf []byte) {

	pos := uint(0)

	buf[pos] = 253
	binary.BigEndian.PutUint16(buf[pos+1:], uint16(594))
	pos += 3
	pos += uint(enc.TLNum(len(value.Type)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.Type)
	pos += uint(len(value.Type))
	if value.Target != nil {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(595))
		pos += 3
		pos += uint(enc.TLNum(encoder.Target_length).EncodeInto(buf[pos:]))
		for _, c := range value.Target {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
	buf[pos] = 253
	binary.BigEndian.PutUint16(buf[pos+1:], uint16(597))
	pos += 3

	buf[pos] = byte(enc.Nat(value.SnapshotThreshold).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
}

func (encoder *RepoCommandEncoder) Encode(value *RepoCommand) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *RepoCommandParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*RepoCommand, error) {

	var handled_Type bool = false
	var handled_Target bool = false
	var handled_SnapshotThreshold bool = false

	progress := -1
	_ = progress

	value := &RepoCommand{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 594:
				if true {
					handled = true
					handled_Type = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.Type = builder.String()
						}
					}
				}
			case 595:
				if true {
					handled = true
					handled_Target = true
					delegate := reader.Delegate(int(l))
					value.Target, err = delegate.ReadName()
				}
			case 597:
				if true {
					handled = true
					handled_SnapshotThreshold = true
					value.SnapshotThreshold = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.SnapshotThreshold = uint64(value.SnapshotThreshold<<8) | uint64(x)
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Type && err == nil {
		err = enc.ErrSkipRequired{Name: "Type", TypeNum: 594}
	}
	if !handled_Target && err == nil {
		value.Target = nil
	}
	if !handled_SnapshotThreshold && err == nil {
		err = enc.ErrSkipRequired{Name: "SnapshotThreshold", TypeNum: 597}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *RepoCommand) Encode() enc.Wire {
	encoder := RepoCommandEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *RepoCommand) Bytes() []byte {
	return value.Encode().Join()
}

func ParseRepoCommand(reader enc.WireView, ignoreCritical bool) (*RepoCommand, error) {
	context := RepoCommandParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type AwarenessUpdateEncoder struct {
	Length uint

	Node_length           uint
	ActiveJobs_subencoder []struct {
		ActiveJobs_encoder RepoCommandEncoder
	}
}

type AwarenessUpdateParsingContext struct {
	ActiveJobs_context RepoCommandParsingContext
}

func (encoder *AwarenessUpdateEncoder) Init(value *AwarenessUpdate) {
	if value.Node != nil {
		encoder.Node_length = 0
		for _, c := range value.Node {
			encoder.Node_length += uint(c.EncodingLength())
		}
	}
	{
		ActiveJobs_l := len(value.ActiveJobs)
		encoder.ActiveJobs_subencoder = make([]struct {
			ActiveJobs_encoder RepoCommandEncoder
		}, ActiveJobs_l)
		for i := 0; i < ActiveJobs_l; i++ {
			pseudoEncoder := &encoder.ActiveJobs_subencoder[i]
			pseudoValue := struct {
				ActiveJobs *RepoCommand
			}{
				ActiveJobs: value.ActiveJobs[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.ActiveJobs != nil {
					encoder.ActiveJobs_encoder.Init(value.ActiveJobs)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.Node != nil {
		l += 3
		l += uint(enc.TLNum(encoder.Node_length).EncodingLength())
		l += encoder.Node_length
	}
	if value.ActiveJobs != nil {
		for seq_i, seq_v := range value.ActiveJobs {
			pseudoEncoder := &encoder.ActiveJobs_subencoder[seq_i]
			pseudoValue := struct {
				ActiveJobs *RepoCommand
			}{
				ActiveJobs: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.ActiveJobs != nil {
					l += 3
					l += uint(enc.TLNum(encoder.ActiveJobs_encoder.Length).EncodingLength())
					l += encoder.ActiveJobs_encoder.Length
				}
				_ = encoder
				_ = value
			}
		}
	}
	encoder.Length = l

}

func (context *AwarenessUpdateParsingContext) Init() {

	context.ActiveJobs_context.Init()
}

func (encoder *AwarenessUpdateEncoder) EncodeInto(value *AwarenessUpdate, buf []byte) {

	pos := uint(0)

	if value.Node != nil {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(576))
		pos += 3
		pos += uint(enc.TLNum(encoder.Node_length).EncodeInto(buf[pos:]))
		for _, c := range value.Node {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
	if value.ActiveJobs != nil {
		for seq_i, seq_v := range value.ActiveJobs {
			pseudoEncoder := &encoder.ActiveJobs_subencoder[seq_i]
			pseudoValue := struct {
				ActiveJobs *RepoCommand
			}{
				ActiveJobs: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.ActiveJobs != nil {
					buf[pos] = 253
					binary.BigEndian.PutUint16(buf[pos+1:], uint16(577))
					pos += 3
					pos += uint(enc.TLNum(encoder.ActiveJobs_encoder.Length).EncodeInto(buf[pos:]))
					if encoder.ActiveJobs_encoder.Length > 0 {
						encoder.ActiveJobs_encoder.EncodeInto(value.ActiveJobs, buf[pos:])
						pos += encoder.ActiveJobs_encoder.Length
					}
				}
				_ = encoder
				_ = value
			}
		}
	}
}

func (encoder *AwarenessUpdateEncoder) Encode(value *AwarenessUpdate) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *AwarenessUpdateParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*AwarenessUpdate, error) {

	var handled_Node bool = false
	var handled_ActiveJobs bool = false

	progress := -1
	_ = progress

	value := &AwarenessUpdate{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 576:
				if true {
					handled = true
					handled_Node = true
					delegate := reader.Delegate(int(l))
					value.Node, err = delegate.ReadName()
				}
			case 577:
				if true {
					handled = true
					handled_ActiveJobs = true
					if value.ActiveJobs == nil {
						value.ActiveJobs = make([]*RepoCommand, 0)
					}
					{
						pseudoValue := struct {
							ActiveJobs *RepoCommand
						}{}
						{
							value := &pseudoValue
							value.ActiveJobs, err = context.ActiveJobs_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.ActiveJobs = append(value.ActiveJobs, pseudoValue.ActiveJobs)
					}
					progress--
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Node && err == nil {
		value.Node = nil
	}
	if !handled_ActiveJobs && err == nil {
		// sequence - skip
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *AwarenessUpdate) Encode() enc.Wire {
	encoder := AwarenessUpdateEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *AwarenessUpdate) Bytes() []byte {
	return value.Encode().Join()
}

func ParseAwarenessUpdate(reader enc.WireView, ignoreCritical bool) (*AwarenessUpdate, error) {
	context := AwarenessUpdateParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type RepoStatusRequestEncoder struct {
	Length uint

	Target_length uint
}

type RepoStatusRequestParsingContext struct {
}

func (encoder *RepoStatusRequestEncoder) Init(value *RepoStatusRequest) {
	if value.Target != nil {
		encoder.Target_length = 0
		for _, c := range value.Target {
			encoder.Target_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	if value.Target != nil {
		l += 3
		l += uint(enc.TLNum(encoder.Target_length).EncodingLength())
		l += encoder.Target_length
	}
	encoder.Length = l

}

func (context *RepoStatusRequestParsingContext) Init() {

}

func (encoder *RepoStatusRequestEncoder) EncodeInto(value *RepoStatusRequest, buf []byte) {

	pos := uint(0)

	if value.Target != nil {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(640))
		pos += 3
		pos += uint(enc.TLNum(encoder.Target_length).EncodeInto(buf[pos:]))
		for _, c := range value.Target {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
}

func (encoder *RepoStatusRequestEncoder) Encode(value *RepoStatusRequest) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *RepoStatusRequestParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*RepoStatusRequest, error) {

	var handled_Target bool = false

	progress := -1
	_ = progress

	value := &RepoStatusRequest{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 640:
				if true {
					handled = true
					handled_Target = true
					delegate := reader.Delegate(int(l))
					value.Target, err = delegate.ReadName()
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Target && err == nil {
		value.Target = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *RepoStatusRequest) Encode() enc.Wire {
	encoder := RepoStatusRequestEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *RepoStatusRequest) Bytes() []byte {
	return value.Encode().Join()
}

func ParseRepoStatusRequest(reader enc.WireView, ignoreCritical bool) (*RepoStatusRequest, error) {
	context := RepoStatusRequestParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type RepoStatusResponseEncoder struct {
	Length uint

	Target_length uint
}

type RepoStatusResponseParsingContext struct {
}

func (encoder *RepoStatusResponseEncoder) Init(value *RepoStatusResponse) {
	if value.Target != nil {
		encoder.Target_length = 0
		for _, c := range value.Target {
			encoder.Target_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	if value.Target != nil {
		l += 3
		l += uint(enc.TLNum(encoder.Target_length).EncodingLength())
		l += encoder.Target_length
	}
	l += 3
	l += uint(1 + enc.Nat(value.Status).EncodingLength())
	encoder.Length = l

}

func (context *RepoStatusResponseParsingContext) Init() {

}

func (encoder *RepoStatusResponseEncoder) EncodeInto(value *RepoStatusResponse, buf []byte) {

	pos := uint(0)

	if value.Target != nil {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(640))
		pos += 3
		pos += uint(enc.TLNum(encoder.Target_length).EncodeInto(buf[pos:]))
		for _, c := range value.Target {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
	buf[pos] = 253
	binary.BigEndian.PutUint16(buf[pos+1:], uint16(641))
	pos += 3

	buf[pos] = byte(enc.Nat(value.Status).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
}

func (encoder *RepoStatusResponseEncoder) Encode(value *RepoStatusResponse) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *RepoStatusResponseParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*RepoStatusResponse, error) {

	var handled_Target bool = false
	var handled_Status bool = false

	progress := -1
	_ = progress

	value := &RepoStatusResponse{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 640:
				if true {
					handled = true
					handled_Target = true
					delegate := reader.Delegate(int(l))
					value.Target, err = delegate.ReadName()
				}
			case 641:
				if true {
					handled = true
					handled_Status = true
					value.Status = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Status = uint64(value.Status<<8) | uint64(x)
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Target && err == nil {
		value.Target = nil
	}
	if !handled_Status && err == nil {
		err = enc.ErrSkipRequired{Name: "Status", TypeNum: 641}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *RepoStatusResponse) Encode() enc.Wire {
	encoder := RepoStatusResponseEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *RepoStatusResponse) Bytes() []byte {
	return value.Encode().Join()
}

func ParseRepoStatusResponse(reader enc.WireView, ignoreCritical bool) (*RepoStatusResponse, error) {
	context := RepoStatusResponseParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}
